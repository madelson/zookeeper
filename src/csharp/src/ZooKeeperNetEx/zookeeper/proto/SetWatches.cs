// note: decompiled from ZooKeeperNetEx source
// File generated by hadoop record compiler. Do not edit.

#pragma warning disable

using System.Collections.Generic;
using org.apache.jute;

namespace org.apache.zookeeper.proto
{
    internal class SetWatches : Record
    {
        private long relativeZxid;
        private List<string> dataWatches;
        private List<string> existWatches;
        private List<string> childWatches;
        public SetWatches() { }
        public SetWatches(long relativeZxid, List<string> dataWatches, List<string> existWatches, List<string> childWatches)
        {
            this.relativeZxid = relativeZxid;
            this.dataWatches = dataWatches;
            this.existWatches = existWatches;
            this.childWatches = childWatches;
        }
        public long getRelativeZxid() { return relativeZxid; }
        internal void setRelativeZxid(long m_) { relativeZxid = m_; }

        public List<string> getDataWatches() { return dataWatches; }
        internal void setDataWatches(List<string> m_) { dataWatches = m_; }

        public List<string> getExistWatches() { return existWatches; }
        internal void setExistWatches(List<string> m_) { existWatches = m_; }

        public List<string> getChildWatches() { return childWatches; }
        internal void setChildWatches(List<string> m_) { childWatches = m_; }

        void Record.serialize(OutputArchive a_, string tag)
        {
            a_.writeLong(relativeZxid, "relativeZxid");
            {
                a_.startVector(dataWatches, "dataWatches");
                if (dataWatches != null)
                {
                    foreach (var e1 in dataWatches) a_.writeString(e1, e1);
                }
            }
            {
                a_.startVector(existWatches, "existWatches");
                if (existWatches != null)
                {
                    foreach (var e1 in existWatches) a_.writeString(e1, e1);
                }
            }
            {
                a_.startVector(childWatches, "childWatches");
                if (childWatches != null)
                {
                    foreach (var e1 in childWatches) a_.writeString(e1, e1);
                }
            }
        }
        void Record.deserialize(InputArchive a_, string tag)
        {
            relativeZxid = a_.readLong("relativeZxid");
            {
                Index vidx1 = a_.startVector("dataWatches");
                if (vidx1 != null)
                {
                    var tmpLst = new List<string>();
                    for (; !vidx1.done(); vidx1.incr())
                    {
                        string e1;
                        e1 = a_.readString("e1");
                        tmpLst.Add(e1);
                    }
                    dataWatches = tmpLst;
                }
            }
            {
                Index vidx1 = a_.startVector("existWatches");
                if (vidx1 != null)
                {
                    var tmpLst = new List<string>();
                    for (; !vidx1.done(); vidx1.incr())
                    {
                        string e1;
                        e1 = a_.readString("e1");
                        tmpLst.Add(e1);
                    }
                    existWatches = tmpLst;
                }
            }
            {
                Index vidx1 = a_.startVector("childWatches");
                if (vidx1 != null)
                {
                    var tmpLst = new List<string>();
                    for (; !vidx1.done(); vidx1.incr())
                    {
                        string e1;
                        e1 = a_.readString("e1");
                        tmpLst.Add(e1);
                    }
                    childWatches = tmpLst;
                }
            }
        }
    }
}
